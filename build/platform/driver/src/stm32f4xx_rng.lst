ARM GAS  /tmp/ccVVRTl7.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rng.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RNG_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	RNG_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	RNG_DeInit:
  27              	.LFB123:
  28              		.file 1 "platform/driver/src/stm32f4xx_rng.c"
   1:platform/driver/src/stm32f4xx_rng.c **** /**
   2:platform/driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:platform/driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:platform/driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:platform/driver/src/stm32f4xx_rng.c ****   * @version V1.8.1
   6:platform/driver/src/stm32f4xx_rng.c ****   * @date    27-January-2022
   7:platform/driver/src/stm32f4xx_rng.c ****   * @brief This file provides firmware functions to manage the following 
   8:platform/driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:platform/driver/src/stm32f4xx_rng.c ****   *           + Initialization and Configuration 
  10:platform/driver/src/stm32f4xx_rng.c ****   *           + Get 32 bit Random number      
  11:platform/driver/src/stm32f4xx_rng.c ****   *           + Interrupts and flags management       
  12:platform/driver/src/stm32f4xx_rng.c ****   *         
  13:platform/driver/src/stm32f4xx_rng.c **** @verbatim
  14:platform/driver/src/stm32f4xx_rng.c ****                                  
  15:platform/driver/src/stm32f4xx_rng.c ****  ===================================================================      
  16:platform/driver/src/stm32f4xx_rng.c ****                  ##### How to use this driver #####
  17:platform/driver/src/stm32f4xx_rng.c ****  ===================================================================          
  18:platform/driver/src/stm32f4xx_rng.c ****  [..]
  19:platform/driver/src/stm32f4xx_rng.c ****    (#) Enable The RNG controller clock using 
  20:platform/driver/src/stm32f4xx_rng.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  21:platform/driver/src/stm32f4xx_rng.c ****                 
  22:platform/driver/src/stm32f4xx_rng.c ****    (#) Activate the RNG peripheral using RNG_Cmd() function.
  23:platform/driver/src/stm32f4xx_rng.c ****             
  24:platform/driver/src/stm32f4xx_rng.c ****    (#) Wait until the 32 bit Random number Generator contains a valid  random data
  25:platform/driver/src/stm32f4xx_rng.c ****       (using polling/interrupt mode). For more details, refer to "Interrupts and 
  26:platform/driver/src/stm32f4xx_rng.c ****       flags management functions" module description.
  27:platform/driver/src/stm32f4xx_rng.c ****              
  28:platform/driver/src/stm32f4xx_rng.c ****    (#) Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:platform/driver/src/stm32f4xx_rng.c ****             
  30:platform/driver/src/stm32f4xx_rng.c ****    (#) To get another 32 bit Random number, go to step 3.       
ARM GAS  /tmp/ccVVRTl7.s 			page 2


  31:platform/driver/src/stm32f4xx_rng.c ****          
  32:platform/driver/src/stm32f4xx_rng.c ****                 
  33:platform/driver/src/stm32f4xx_rng.c **** @endverbatim
  34:platform/driver/src/stm32f4xx_rng.c ****   *         
  35:platform/driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  36:platform/driver/src/stm32f4xx_rng.c ****   * @attention
  37:platform/driver/src/stm32f4xx_rng.c ****   *
  38:platform/driver/src/stm32f4xx_rng.c ****   * Copyright (c) 2016 STMicroelectronics.
  39:platform/driver/src/stm32f4xx_rng.c ****   * All rights reserved.
  40:platform/driver/src/stm32f4xx_rng.c ****   *
  41:platform/driver/src/stm32f4xx_rng.c ****   * This software is licensed under terms that can be found in the LICENSE file
  42:platform/driver/src/stm32f4xx_rng.c ****   * in the root directory of this software component.
  43:platform/driver/src/stm32f4xx_rng.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  44:platform/driver/src/stm32f4xx_rng.c ****   *
  45:platform/driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  46:platform/driver/src/stm32f4xx_rng.c ****   */
  47:platform/driver/src/stm32f4xx_rng.c **** 
  48:platform/driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  49:platform/driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  50:platform/driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  51:platform/driver/src/stm32f4xx_rng.c **** 
  52:platform/driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  53:platform/driver/src/stm32f4xx_rng.c ****   * @{
  54:platform/driver/src/stm32f4xx_rng.c ****   */
  55:platform/driver/src/stm32f4xx_rng.c **** 
  56:platform/driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  57:platform/driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  58:platform/driver/src/stm32f4xx_rng.c ****   * @{
  59:platform/driver/src/stm32f4xx_rng.c ****   */ 
  60:platform/driver/src/stm32f4xx_rng.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F410xx) || defined(STM32F41
  61:platform/driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  62:platform/driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  63:platform/driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  64:platform/driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  65:platform/driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  66:platform/driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  67:platform/driver/src/stm32f4xx_rng.c **** 
  68:platform/driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  69:platform/driver/src/stm32f4xx_rng.c ****   * @{
  70:platform/driver/src/stm32f4xx_rng.c ****   */ 
  71:platform/driver/src/stm32f4xx_rng.c **** 
  72:platform/driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  73:platform/driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  74:platform/driver/src/stm32f4xx_rng.c ****  *
  75:platform/driver/src/stm32f4xx_rng.c **** @verbatim    
  76:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================
  77:platform/driver/src/stm32f4xx_rng.c ****              ##### Initialization and Configuration functions #####
  78:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  79:platform/driver/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to 
  80:platform/driver/src/stm32f4xx_rng.c ****    (+) Initialize the RNG peripheral
  81:platform/driver/src/stm32f4xx_rng.c ****    (+) Enable or disable the RNG peripheral
  82:platform/driver/src/stm32f4xx_rng.c ****    
  83:platform/driver/src/stm32f4xx_rng.c **** @endverbatim
  84:platform/driver/src/stm32f4xx_rng.c ****   * @{
  85:platform/driver/src/stm32f4xx_rng.c ****   */
  86:platform/driver/src/stm32f4xx_rng.c **** 
  87:platform/driver/src/stm32f4xx_rng.c **** /**
ARM GAS  /tmp/ccVVRTl7.s 			page 3


  88:platform/driver/src/stm32f4xx_rng.c ****   * @brief  De-initializes the RNG peripheral registers to their default reset values.
  89:platform/driver/src/stm32f4xx_rng.c ****   * @param  None
  90:platform/driver/src/stm32f4xx_rng.c ****   * @retval None
  91:platform/driver/src/stm32f4xx_rng.c ****   */
  92:platform/driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
  93:platform/driver/src/stm32f4xx_rng.c **** {
  29              		.loc 1 93 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
  94:platform/driver/src/stm32f4xx_rng.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
  95:platform/driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
  96:platform/driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  38              		.loc 1 96 3 view .LVU1
  39 0002 0121     		movs	r1, #1
  40 0004 4020     		movs	r0, #64
  41 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  42              	.LVL0:
  97:platform/driver/src/stm32f4xx_rng.c **** 
  98:platform/driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
  99:platform/driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  43              		.loc 1 99 3 view .LVU2
  44 000a 0021     		movs	r1, #0
  45 000c 4020     		movs	r0, #64
  46 000e FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  47              	.LVL1:
 100:platform/driver/src/stm32f4xx_rng.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 101:platform/driver/src/stm32f4xx_rng.c **** #if defined(STM32F410xx)
 102:platform/driver/src/stm32f4xx_rng.c ****    /* Enable RNG reset state */
 103:platform/driver/src/stm32f4xx_rng.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);
 104:platform/driver/src/stm32f4xx_rng.c **** 
 105:platform/driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:platform/driver/src/stm32f4xx_rng.c ****   RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
 107:platform/driver/src/stm32f4xx_rng.c **** #endif /* STM32F410xx*/  
 108:platform/driver/src/stm32f4xx_rng.c **** }
  48              		.loc 1 108 1 is_stmt 0 view .LVU3
  49 0012 08BD     		pop	{r3, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.RNG_Cmd,"ax",%progbits
  54              		.align	1
  55              		.global	RNG_Cmd
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	RNG_Cmd:
  61              	.LVL2:
  62              	.LFB124:
 109:platform/driver/src/stm32f4xx_rng.c **** 
 110:platform/driver/src/stm32f4xx_rng.c **** /**
 111:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 112:platform/driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
ARM GAS  /tmp/ccVVRTl7.s 			page 4


 113:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 114:platform/driver/src/stm32f4xx_rng.c ****   * @retval None
 115:platform/driver/src/stm32f4xx_rng.c ****   */
 116:platform/driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 117:platform/driver/src/stm32f4xx_rng.c **** {
  63              		.loc 1 117 1 is_stmt 1 view -0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
 118:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 119:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  68              		.loc 1 119 3 view .LVU5
 120:platform/driver/src/stm32f4xx_rng.c **** 
 121:platform/driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  69              		.loc 1 121 3 view .LVU6
  70              		.loc 1 121 6 is_stmt 0 view .LVU7
  71 0000 28B1     		cbz	r0, .L4
 122:platform/driver/src/stm32f4xx_rng.c ****   {
 123:platform/driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 124:platform/driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  72              		.loc 1 124 5 is_stmt 1 view .LVU8
  73              		.loc 1 124 13 is_stmt 0 view .LVU9
  74 0002 064A     		ldr	r2, .L6
  75 0004 1368     		ldr	r3, [r2]
  76 0006 43F00403 		orr	r3, r3, #4
  77 000a 1360     		str	r3, [r2]
  78 000c 7047     		bx	lr
  79              	.L4:
 125:platform/driver/src/stm32f4xx_rng.c ****   }
 126:platform/driver/src/stm32f4xx_rng.c ****   else
 127:platform/driver/src/stm32f4xx_rng.c ****   {
 128:platform/driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 129:platform/driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  80              		.loc 1 129 5 is_stmt 1 view .LVU10
  81              		.loc 1 129 13 is_stmt 0 view .LVU11
  82 000e 034A     		ldr	r2, .L6
  83 0010 1368     		ldr	r3, [r2]
  84 0012 23F00403 		bic	r3, r3, #4
  85 0016 1360     		str	r3, [r2]
 130:platform/driver/src/stm32f4xx_rng.c ****   }
 131:platform/driver/src/stm32f4xx_rng.c **** }
  86              		.loc 1 131 1 view .LVU12
  87 0018 7047     		bx	lr
  88              	.L7:
  89 001a 00BF     		.align	2
  90              	.L6:
  91 001c 00080650 		.word	1342572544
  92              		.cfi_endproc
  93              	.LFE124:
  95              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
  96              		.align	1
  97              		.global	RNG_GetRandomNumber
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 102              	RNG_GetRandomNumber:
ARM GAS  /tmp/ccVVRTl7.s 			page 5


 103              	.LFB125:
 132:platform/driver/src/stm32f4xx_rng.c **** /**
 133:platform/driver/src/stm32f4xx_rng.c ****   * @}
 134:platform/driver/src/stm32f4xx_rng.c ****   */
 135:platform/driver/src/stm32f4xx_rng.c **** 
 136:platform/driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 137:platform/driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 138:platform/driver/src/stm32f4xx_rng.c ****  *
 139:platform/driver/src/stm32f4xx_rng.c **** 
 140:platform/driver/src/stm32f4xx_rng.c **** @verbatim    
 141:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================
 142:platform/driver/src/stm32f4xx_rng.c ****                  ##### Get 32 bit Random number function #####
 143:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 144:platform/driver/src/stm32f4xx_rng.c ****  [..] This section provides a function allowing to get the 32 bit Random number  
 145:platform/driver/src/stm32f4xx_rng.c ****   
 146:platform/driver/src/stm32f4xx_rng.c ****    (@)  Before to call this function you have to wait till DRDY flag is set,
 147:platform/driver/src/stm32f4xx_rng.c ****         using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 148:platform/driver/src/stm32f4xx_rng.c ****    
 149:platform/driver/src/stm32f4xx_rng.c **** @endverbatim
 150:platform/driver/src/stm32f4xx_rng.c ****   * @{
 151:platform/driver/src/stm32f4xx_rng.c ****   */
 152:platform/driver/src/stm32f4xx_rng.c **** 
 153:platform/driver/src/stm32f4xx_rng.c **** 
 154:platform/driver/src/stm32f4xx_rng.c **** /**
 155:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 156:platform/driver/src/stm32f4xx_rng.c ****   *   
 157:platform/driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 158:platform/driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 159:platform/driver/src/stm32f4xx_rng.c ****   * @note   Each time the Random number data is read (using RNG_GetRandomNumber()
 160:platform/driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 161:platform/driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 162:platform/driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 163:platform/driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 164:platform/driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 165:platform/driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 166:platform/driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 167:platform/driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 168:platform/driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 169:platform/driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 170:platform/driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 171:platform/driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 172:platform/driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 173:platform/driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 174:platform/driver/src/stm32f4xx_rng.c ****   *         
 175:platform/driver/src/stm32f4xx_rng.c ****   * @param  None
 176:platform/driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 177:platform/driver/src/stm32f4xx_rng.c ****   */
 178:platform/driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 179:platform/driver/src/stm32f4xx_rng.c **** {
 104              		.loc 1 179 1 is_stmt 1 view -0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 180:platform/driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 181:platform/driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 109              		.loc 1 181 3 view .LVU14
ARM GAS  /tmp/ccVVRTl7.s 			page 6


 110              		.loc 1 181 13 is_stmt 0 view .LVU15
 111 0000 014B     		ldr	r3, .L9
 112 0002 9868     		ldr	r0, [r3, #8]
 182:platform/driver/src/stm32f4xx_rng.c **** }
 113              		.loc 1 182 1 view .LVU16
 114 0004 7047     		bx	lr
 115              	.L10:
 116 0006 00BF     		.align	2
 117              	.L9:
 118 0008 00080650 		.word	1342572544
 119              		.cfi_endproc
 120              	.LFE125:
 122              		.section	.text.RNG_ITConfig,"ax",%progbits
 123              		.align	1
 124              		.global	RNG_ITConfig
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	RNG_ITConfig:
 130              	.LVL3:
 131              	.LFB126:
 183:platform/driver/src/stm32f4xx_rng.c **** 
 184:platform/driver/src/stm32f4xx_rng.c **** 
 185:platform/driver/src/stm32f4xx_rng.c **** /**
 186:platform/driver/src/stm32f4xx_rng.c ****   * @}
 187:platform/driver/src/stm32f4xx_rng.c ****   */
 188:platform/driver/src/stm32f4xx_rng.c **** 
 189:platform/driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 190:platform/driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 191:platform/driver/src/stm32f4xx_rng.c ****  *
 192:platform/driver/src/stm32f4xx_rng.c **** @verbatim   
 193:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================
 194:platform/driver/src/stm32f4xx_rng.c ****              ##### Interrupts and flags management functions #####
 195:platform/driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 196:platform/driver/src/stm32f4xx_rng.c **** 
 197:platform/driver/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to configure the RNG Interrupts and 
 198:platform/driver/src/stm32f4xx_rng.c ****       to get the status and clear flags and Interrupts pending bits.
 199:platform/driver/src/stm32f4xx_rng.c ****   
 200:platform/driver/src/stm32f4xx_rng.c ****  [..] The RNG provides 3 Interrupts sources and 3 Flags:
 201:platform/driver/src/stm32f4xx_rng.c ****   
 202:platform/driver/src/stm32f4xx_rng.c ****  *** Flags : ***
 203:platform/driver/src/stm32f4xx_rng.c ****  ===============
 204:platform/driver/src/stm32f4xx_rng.c ****  [..] 
 205:platform/driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 206:platform/driver/src/stm32f4xx_rng.c ****         random data. it is cleared by reading the valid data(using 
 207:platform/driver/src/stm32f4xx_rng.c ****         RNG_GetRandomNumber() function).
 208:platform/driver/src/stm32f4xx_rng.c **** 
 209:platform/driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_CECS : In the case of a seed error detection. 
 210:platform/driver/src/stm32f4xx_rng.c ****       
 211:platform/driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_SECS : In the case of a clock error detection.
 212:platform/driver/src/stm32f4xx_rng.c ****               
 213:platform/driver/src/stm32f4xx_rng.c ****  *** Interrupts ***
 214:platform/driver/src/stm32f4xx_rng.c ****  ==================
 215:platform/driver/src/stm32f4xx_rng.c ****  [..] If enabled, an RNG interrupt is pending :
 216:platform/driver/src/stm32f4xx_rng.c ****     
 217:platform/driver/src/stm32f4xx_rng.c ****    (#) In the case of the RNG_DR register contains valid random data. 
 218:platform/driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
ARM GAS  /tmp/ccVVRTl7.s 			page 7


 219:platform/driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 220:platform/driver/src/stm32f4xx_rng.c ****        computed; or 
 221:platform/driver/src/stm32f4xx_rng.c ****    (#) In the case of a seed error : One of the following faulty sequences has 
 222:platform/driver/src/stm32f4xx_rng.c ****        been detected:
 223:platform/driver/src/stm32f4xx_rng.c ****        (++) More than 64 consecutive bits at the same value (0 or 1)
 224:platform/driver/src/stm32f4xx_rng.c ****        (++) More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 225:platform/driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 226:platform/driver/src/stm32f4xx_rng.c ****        function; or
 227:platform/driver/src/stm32f4xx_rng.c ****    (#) In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 228:platform/driver/src/stm32f4xx_rng.c ****        was not correctly detected (fPLL48CLK< fHCLK/16). This interrupt source is
 229:platform/driver/src/stm32f4xx_rng.c ****        cleared using RNG_ClearITPendingBit(RNG_IT_CEI) function.
 230:platform/driver/src/stm32f4xx_rng.c ****        -@- note In this case, User have to check that the clock controller is 
 231:platform/driver/src/stm32f4xx_rng.c ****            correctly configured to provide the RNG clock. 
 232:platform/driver/src/stm32f4xx_rng.c **** 
 233:platform/driver/src/stm32f4xx_rng.c ****  *** Managing the RNG controller events : ***
 234:platform/driver/src/stm32f4xx_rng.c ****  ============================================
 235:platform/driver/src/stm32f4xx_rng.c ****  [..] The user should identify which mode will be used in his application to manage 
 236:platform/driver/src/stm32f4xx_rng.c ****       the RNG controller events: Polling mode or Interrupt mode.
 237:platform/driver/src/stm32f4xx_rng.c ****   
 238:platform/driver/src/stm32f4xx_rng.c ****    (#) In the Polling Mode it is advised to use the following functions:
 239:platform/driver/src/stm32f4xx_rng.c ****        (++) RNG_GetFlagStatus() : to check if flags events occur. 
 240:platform/driver/src/stm32f4xx_rng.c ****        (++) RNG_ClearFlag()     : to clear the flags events.
 241:platform/driver/src/stm32f4xx_rng.c ****   
 242:platform/driver/src/stm32f4xx_rng.c ****        -@@- RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 243:platform/driver/src/stm32f4xx_rng.c ****             by reading the Random number data.      
 244:platform/driver/src/stm32f4xx_rng.c ****   
 245:platform/driver/src/stm32f4xx_rng.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 246:platform/driver/src/stm32f4xx_rng.c ****         (++) RNG_ITConfig()       : to enable or disable the interrupt source.
 247:platform/driver/src/stm32f4xx_rng.c ****         (++) RNG_GetITStatus()    : to check if Interrupt occurs.
 248:platform/driver/src/stm32f4xx_rng.c ****         (++) RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 249:platform/driver/src/stm32f4xx_rng.c ****              (corresponding Flag). 
 250:platform/driver/src/stm32f4xx_rng.c ****   
 251:platform/driver/src/stm32f4xx_rng.c **** @endverbatim
 252:platform/driver/src/stm32f4xx_rng.c ****   * @{
 253:platform/driver/src/stm32f4xx_rng.c ****   */ 
 254:platform/driver/src/stm32f4xx_rng.c **** 
 255:platform/driver/src/stm32f4xx_rng.c **** /**
 256:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 257:platform/driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 258:platform/driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 259:platform/driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 260:platform/driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 261:platform/driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 262:platform/driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 263:platform/driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 264:platform/driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 265:platform/driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 266:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 267:platform/driver/src/stm32f4xx_rng.c ****   * @retval None
 268:platform/driver/src/stm32f4xx_rng.c ****   */
 269:platform/driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 270:platform/driver/src/stm32f4xx_rng.c **** {
 132              		.loc 1 270 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
ARM GAS  /tmp/ccVVRTl7.s 			page 8


 271:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 272:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 137              		.loc 1 272 3 view .LVU18
 273:platform/driver/src/stm32f4xx_rng.c **** 
 274:platform/driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 138              		.loc 1 274 3 view .LVU19
 139              		.loc 1 274 6 is_stmt 0 view .LVU20
 140 0000 28B1     		cbz	r0, .L12
 275:platform/driver/src/stm32f4xx_rng.c ****   {
 276:platform/driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 277:platform/driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 141              		.loc 1 277 5 is_stmt 1 view .LVU21
 142              		.loc 1 277 13 is_stmt 0 view .LVU22
 143 0002 064A     		ldr	r2, .L14
 144 0004 1368     		ldr	r3, [r2]
 145 0006 43F00803 		orr	r3, r3, #8
 146 000a 1360     		str	r3, [r2]
 147 000c 7047     		bx	lr
 148              	.L12:
 278:platform/driver/src/stm32f4xx_rng.c ****   }
 279:platform/driver/src/stm32f4xx_rng.c ****   else
 280:platform/driver/src/stm32f4xx_rng.c ****   {
 281:platform/driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 282:platform/driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 149              		.loc 1 282 5 is_stmt 1 view .LVU23
 150              		.loc 1 282 13 is_stmt 0 view .LVU24
 151 000e 034A     		ldr	r2, .L14
 152 0010 1368     		ldr	r3, [r2]
 153 0012 23F00803 		bic	r3, r3, #8
 154 0016 1360     		str	r3, [r2]
 283:platform/driver/src/stm32f4xx_rng.c ****   }
 284:platform/driver/src/stm32f4xx_rng.c **** }
 155              		.loc 1 284 1 view .LVU25
 156 0018 7047     		bx	lr
 157              	.L15:
 158 001a 00BF     		.align	2
 159              	.L14:
 160 001c 00080650 		.word	1342572544
 161              		.cfi_endproc
 162              	.LFE126:
 164              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 165              		.align	1
 166              		.global	RNG_GetFlagStatus
 167              		.syntax unified
 168              		.thumb
 169              		.thumb_func
 171              	RNG_GetFlagStatus:
 172              	.LVL4:
 173              	.LFB127:
 285:platform/driver/src/stm32f4xx_rng.c **** 
 286:platform/driver/src/stm32f4xx_rng.c **** /**
 287:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 288:platform/driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 289:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 290:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 291:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 292:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
ARM GAS  /tmp/ccVVRTl7.s 			page 9


 293:platform/driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 294:platform/driver/src/stm32f4xx_rng.c ****   */
 295:platform/driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 296:platform/driver/src/stm32f4xx_rng.c **** {
 174              		.loc 1 296 1 is_stmt 1 view -0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 297:platform/driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 179              		.loc 1 297 3 view .LVU27
 298:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 299:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 180              		.loc 1 299 3 view .LVU28
 300:platform/driver/src/stm32f4xx_rng.c **** 
 301:platform/driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 302:platform/driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 181              		.loc 1 302 3 view .LVU29
 182              		.loc 1 302 11 is_stmt 0 view .LVU30
 183 0000 034B     		ldr	r3, .L19
 184 0002 5B68     		ldr	r3, [r3, #4]
 185              		.loc 1 302 6 view .LVU31
 186 0004 1842     		tst	r0, r3
 187 0006 01D0     		beq	.L18
 303:platform/driver/src/stm32f4xx_rng.c ****   {
 304:platform/driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 305:platform/driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 188              		.loc 1 305 15 view .LVU32
 189 0008 0120     		movs	r0, #1
 190              	.LVL5:
 191              		.loc 1 305 15 view .LVU33
 192 000a 7047     		bx	lr
 193              	.LVL6:
 194              	.L18:
 306:platform/driver/src/stm32f4xx_rng.c ****   }
 307:platform/driver/src/stm32f4xx_rng.c ****   else
 308:platform/driver/src/stm32f4xx_rng.c ****   {
 309:platform/driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 310:platform/driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 195              		.loc 1 310 15 view .LVU34
 196 000c 0020     		movs	r0, #0
 197              	.LVL7:
 311:platform/driver/src/stm32f4xx_rng.c ****   }
 312:platform/driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 313:platform/driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 198              		.loc 1 313 3 is_stmt 1 view .LVU35
 314:platform/driver/src/stm32f4xx_rng.c **** }
 199              		.loc 1 314 1 is_stmt 0 view .LVU36
 200 000e 7047     		bx	lr
 201              	.L20:
 202              		.align	2
 203              	.L19:
 204 0010 00080650 		.word	1342572544
 205              		.cfi_endproc
 206              	.LFE127:
 208              		.section	.text.RNG_ClearFlag,"ax",%progbits
 209              		.align	1
ARM GAS  /tmp/ccVVRTl7.s 			page 10


 210              		.global	RNG_ClearFlag
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	RNG_ClearFlag:
 216              	.LVL8:
 217              	.LFB128:
 315:platform/driver/src/stm32f4xx_rng.c **** 
 316:platform/driver/src/stm32f4xx_rng.c **** 
 317:platform/driver/src/stm32f4xx_rng.c **** /**
 318:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 319:platform/driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 320:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 321:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 322:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 323:platform/driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 324:platform/driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 325:platform/driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 326:platform/driver/src/stm32f4xx_rng.c ****   * @retval None
 327:platform/driver/src/stm32f4xx_rng.c ****   */
 328:platform/driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 329:platform/driver/src/stm32f4xx_rng.c **** {
 218              		.loc 1 329 1 is_stmt 1 view -0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 330:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 331:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 223              		.loc 1 331 3 view .LVU38
 332:platform/driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 333:platform/driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 224              		.loc 1 333 3 view .LVU39
 225              		.loc 1 333 13 is_stmt 0 view .LVU40
 226 0000 6FEA0010 		mvn	r0, r0, lsl #4
 227              	.LVL9:
 228              		.loc 1 333 11 view .LVU41
 229 0004 014B     		ldr	r3, .L22
 230 0006 5860     		str	r0, [r3, #4]
 334:platform/driver/src/stm32f4xx_rng.c **** }
 231              		.loc 1 334 1 view .LVU42
 232 0008 7047     		bx	lr
 233              	.L23:
 234 000a 00BF     		.align	2
 235              	.L22:
 236 000c 00080650 		.word	1342572544
 237              		.cfi_endproc
 238              	.LFE128:
 240              		.section	.text.RNG_GetITStatus,"ax",%progbits
 241              		.align	1
 242              		.global	RNG_GetITStatus
 243              		.syntax unified
 244              		.thumb
 245              		.thumb_func
 247              	RNG_GetITStatus:
 248              	.LVL10:
 249              	.LFB129:
ARM GAS  /tmp/ccVVRTl7.s 			page 11


 335:platform/driver/src/stm32f4xx_rng.c **** 
 336:platform/driver/src/stm32f4xx_rng.c **** /**
 337:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 338:platform/driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 339:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 340:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 341:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 342:platform/driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 343:platform/driver/src/stm32f4xx_rng.c ****   */
 344:platform/driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 345:platform/driver/src/stm32f4xx_rng.c **** {
 250              		.loc 1 345 1 is_stmt 1 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 346:platform/driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 255              		.loc 1 346 3 view .LVU44
 347:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 348:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 256              		.loc 1 348 3 view .LVU45
 349:platform/driver/src/stm32f4xx_rng.c **** 
 350:platform/driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 351:platform/driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 257              		.loc 1 351 3 view .LVU46
 258              		.loc 1 351 11 is_stmt 0 view .LVU47
 259 0000 034B     		ldr	r3, .L27
 260 0002 5B68     		ldr	r3, [r3, #4]
 261              		.loc 1 351 6 view .LVU48
 262 0004 1842     		tst	r0, r3
 263 0006 01D0     		beq	.L26
 352:platform/driver/src/stm32f4xx_rng.c ****   {
 353:platform/driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 354:platform/driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 264              		.loc 1 354 15 view .LVU49
 265 0008 0120     		movs	r0, #1
 266              	.LVL11:
 267              		.loc 1 354 15 view .LVU50
 268 000a 7047     		bx	lr
 269              	.LVL12:
 270              	.L26:
 355:platform/driver/src/stm32f4xx_rng.c ****   }
 356:platform/driver/src/stm32f4xx_rng.c ****   else
 357:platform/driver/src/stm32f4xx_rng.c ****   {
 358:platform/driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 359:platform/driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 271              		.loc 1 359 15 view .LVU51
 272 000c 0020     		movs	r0, #0
 273              	.LVL13:
 360:platform/driver/src/stm32f4xx_rng.c ****   }
 361:platform/driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 362:platform/driver/src/stm32f4xx_rng.c ****   return bitstatus;
 274              		.loc 1 362 3 is_stmt 1 view .LVU52
 363:platform/driver/src/stm32f4xx_rng.c **** }
 275              		.loc 1 363 1 is_stmt 0 view .LVU53
 276 000e 7047     		bx	lr
 277              	.L28:
ARM GAS  /tmp/ccVVRTl7.s 			page 12


 278              		.align	2
 279              	.L27:
 280 0010 00080650 		.word	1342572544
 281              		.cfi_endproc
 282              	.LFE129:
 284              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 285              		.align	1
 286              		.global	RNG_ClearITPendingBit
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	RNG_ClearITPendingBit:
 292              	.LVL14:
 293              	.LFB130:
 364:platform/driver/src/stm32f4xx_rng.c **** 
 365:platform/driver/src/stm32f4xx_rng.c **** 
 366:platform/driver/src/stm32f4xx_rng.c **** /**
 367:platform/driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 368:platform/driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 369:platform/driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 370:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 371:platform/driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 372:platform/driver/src/stm32f4xx_rng.c ****   * @retval None
 373:platform/driver/src/stm32f4xx_rng.c ****   */
 374:platform/driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 375:platform/driver/src/stm32f4xx_rng.c **** {
 294              		.loc 1 375 1 is_stmt 1 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		@ link register save eliminated.
 376:platform/driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 377:platform/driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 299              		.loc 1 377 3 view .LVU55
 378:platform/driver/src/stm32f4xx_rng.c **** 
 379:platform/driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 380:platform/driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 300              		.loc 1 380 3 view .LVU56
 301              		.loc 1 380 13 is_stmt 0 view .LVU57
 302 0000 C043     		mvns	r0, r0
 303              	.LVL15:
 304              		.loc 1 380 13 view .LVU58
 305 0002 C0B2     		uxtb	r0, r0
 306              		.loc 1 380 11 view .LVU59
 307 0004 014B     		ldr	r3, .L30
 308 0006 5860     		str	r0, [r3, #4]
 381:platform/driver/src/stm32f4xx_rng.c **** }
 309              		.loc 1 381 1 view .LVU60
 310 0008 7047     		bx	lr
 311              	.L31:
 312 000a 00BF     		.align	2
 313              	.L30:
 314 000c 00080650 		.word	1342572544
 315              		.cfi_endproc
 316              	.LFE130:
 318              		.text
 319              	.Letext0:
ARM GAS  /tmp/ccVVRTl7.s 			page 13


 320              		.file 2 "/home/lee/stm32f407_boot/tools/toolchain/gcc-arm-none-eabi/gcc-arm-none-eabi-10.3-2021.10
 321              		.file 3 "/home/lee/stm32f407_boot/tools/toolchain/gcc-arm-none-eabi/gcc-arm-none-eabi-10.3-2021.10
 322              		.file 4 "platform/cmsis/device/stm32f4xx.h"
 323              		.file 5 "platform/driver/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccVVRTl7.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rng.c
     /tmp/ccVVRTl7.s:20     .text.RNG_DeInit:0000000000000000 $t
     /tmp/ccVVRTl7.s:26     .text.RNG_DeInit:0000000000000000 RNG_DeInit
     /tmp/ccVVRTl7.s:54     .text.RNG_Cmd:0000000000000000 $t
     /tmp/ccVVRTl7.s:60     .text.RNG_Cmd:0000000000000000 RNG_Cmd
     /tmp/ccVVRTl7.s:91     .text.RNG_Cmd:000000000000001c $d
     /tmp/ccVVRTl7.s:96     .text.RNG_GetRandomNumber:0000000000000000 $t
     /tmp/ccVVRTl7.s:102    .text.RNG_GetRandomNumber:0000000000000000 RNG_GetRandomNumber
     /tmp/ccVVRTl7.s:118    .text.RNG_GetRandomNumber:0000000000000008 $d
     /tmp/ccVVRTl7.s:123    .text.RNG_ITConfig:0000000000000000 $t
     /tmp/ccVVRTl7.s:129    .text.RNG_ITConfig:0000000000000000 RNG_ITConfig
     /tmp/ccVVRTl7.s:160    .text.RNG_ITConfig:000000000000001c $d
     /tmp/ccVVRTl7.s:165    .text.RNG_GetFlagStatus:0000000000000000 $t
     /tmp/ccVVRTl7.s:171    .text.RNG_GetFlagStatus:0000000000000000 RNG_GetFlagStatus
     /tmp/ccVVRTl7.s:204    .text.RNG_GetFlagStatus:0000000000000010 $d
     /tmp/ccVVRTl7.s:209    .text.RNG_ClearFlag:0000000000000000 $t
     /tmp/ccVVRTl7.s:215    .text.RNG_ClearFlag:0000000000000000 RNG_ClearFlag
     /tmp/ccVVRTl7.s:236    .text.RNG_ClearFlag:000000000000000c $d
     /tmp/ccVVRTl7.s:241    .text.RNG_GetITStatus:0000000000000000 $t
     /tmp/ccVVRTl7.s:247    .text.RNG_GetITStatus:0000000000000000 RNG_GetITStatus
     /tmp/ccVVRTl7.s:280    .text.RNG_GetITStatus:0000000000000010 $d
     /tmp/ccVVRTl7.s:285    .text.RNG_ClearITPendingBit:0000000000000000 $t
     /tmp/ccVVRTl7.s:291    .text.RNG_ClearITPendingBit:0000000000000000 RNG_ClearITPendingBit
     /tmp/ccVVRTl7.s:314    .text.RNG_ClearITPendingBit:000000000000000c $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
